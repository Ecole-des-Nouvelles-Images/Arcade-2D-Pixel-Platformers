//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Christopher/Proto/InputActions/Mapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Mapping: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Mapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mapping"",
    ""maps"": [
        {
            ""name"": ""CharacterControler"",
            ""id"": ""b0b26215-3492-496e-8047-2915918c7826"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""22cd4ab0-63d7-4711-a428-21808c2ae2cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeSelect"",
                    ""type"": ""Button"",
                    ""id"": ""a9bbcbf2-975a-496a-bdb5-4c668ed1d08f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeColor"",
                    ""type"": ""Button"",
                    ""id"": ""cd45c1cd-f04a-4643-a098-4cf789cb81d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""6dbed08e-fd5e-41fd-8b19-42e659c88c68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""67e7d5c4-74a9-4727-8c54-dfe0192df6bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29377cf6-2c00-4540-a5c3-ead78b403ac7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bca2df8-d92e-4039-a197-88d69031c124"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32f81c8e-ca98-4e13-9d6e-5bdfce14e256"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""ChangeSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2046648c-0af5-4a88-9bf4-c5dd955d4fdf"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""ChangeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d54fa1-2d02-4879-a132-a3f57297fef1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af496351-81bb-4a93-868c-d1566f8e8b32"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""9f45312c-8b8b-466b-8c8f-eb27e8c5dbcd"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""60c003fe-ecad-40b2-a8a9-be6fe6986f1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76f58efe-a078-4fd1-b029-03e5d3f98e05"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BasicControl"",
            ""bindingGroup"": ""BasicControl"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CharacterControler
        m_CharacterControler = asset.FindActionMap("CharacterControler", throwIfNotFound: true);
        m_CharacterControler_Move = m_CharacterControler.FindAction("Move", throwIfNotFound: true);
        m_CharacterControler_ChangeSelect = m_CharacterControler.FindAction("ChangeSelect", throwIfNotFound: true);
        m_CharacterControler_ChangeColor = m_CharacterControler.FindAction("ChangeColor", throwIfNotFound: true);
        m_CharacterControler_Throw = m_CharacterControler.FindAction("Throw", throwIfNotFound: true);
        m_CharacterControler_Dash = m_CharacterControler.FindAction("Dash", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Newaction = m_Menu.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControler
    private readonly InputActionMap m_CharacterControler;
    private List<ICharacterControlerActions> m_CharacterControlerActionsCallbackInterfaces = new List<ICharacterControlerActions>();
    private readonly InputAction m_CharacterControler_Move;
    private readonly InputAction m_CharacterControler_ChangeSelect;
    private readonly InputAction m_CharacterControler_ChangeColor;
    private readonly InputAction m_CharacterControler_Throw;
    private readonly InputAction m_CharacterControler_Dash;
    public struct CharacterControlerActions
    {
        private @Mapping m_Wrapper;
        public CharacterControlerActions(@Mapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterControler_Move;
        public InputAction @ChangeSelect => m_Wrapper.m_CharacterControler_ChangeSelect;
        public InputAction @ChangeColor => m_Wrapper.m_CharacterControler_ChangeColor;
        public InputAction @Throw => m_Wrapper.m_CharacterControler_Throw;
        public InputAction @Dash => m_Wrapper.m_CharacterControler_Dash;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlerActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlerActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ChangeSelect.started += instance.OnChangeSelect;
            @ChangeSelect.performed += instance.OnChangeSelect;
            @ChangeSelect.canceled += instance.OnChangeSelect;
            @ChangeColor.started += instance.OnChangeColor;
            @ChangeColor.performed += instance.OnChangeColor;
            @ChangeColor.canceled += instance.OnChangeColor;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ICharacterControlerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ChangeSelect.started -= instance.OnChangeSelect;
            @ChangeSelect.performed -= instance.OnChangeSelect;
            @ChangeSelect.canceled -= instance.OnChangeSelect;
            @ChangeColor.started -= instance.OnChangeColor;
            @ChangeColor.performed -= instance.OnChangeColor;
            @ChangeColor.canceled -= instance.OnChangeColor;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ICharacterControlerActions instance)
        {
            if (m_Wrapper.m_CharacterControlerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlerActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlerActions @CharacterControler => new CharacterControlerActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Newaction;
    public struct MenuActions
    {
        private @Mapping m_Wrapper;
        public MenuActions(@Mapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Menu_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_BasicControlSchemeIndex = -1;
    public InputControlScheme BasicControlScheme
    {
        get
        {
            if (m_BasicControlSchemeIndex == -1) m_BasicControlSchemeIndex = asset.FindControlSchemeIndex("BasicControl");
            return asset.controlSchemes[m_BasicControlSchemeIndex];
        }
    }
    public interface ICharacterControlerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnChangeSelect(InputAction.CallbackContext context);
        void OnChangeColor(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
